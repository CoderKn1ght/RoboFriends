{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","name","email","react_default","a","createElement","className","alt","height","width","src","concat","CardList","robots","map","robot","components_Card","key","SearchBox","type","placeholder","onChange","this","props","searchChange","Component","Scroll","style","overflowY","border","children","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","_this2","fetch","then","response","json","users","_this$props","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","dispatch","event","payload","target","value","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83ea7e97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n            <img alt='John Doe' height=\"200px\" width=\"200px\" src={`https://robohash.org/${ id }?set=set2`} />\n            <div>\n                <h2>{ name }</h2>\n                <p> { email }</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst CardList = ({ robots }) => {\n    return(\n        <div>{\n            robots.map(robot => {\n            return (\n                <Card \n                key={robot.id} \n                id={robot.id} \n                name={robot.name} \n                email={robot.email} \n                />\n            );\n        })\n    }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n    render() {\n        return (\n            <div className='pa2'>\n                <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search for a robot'\n                onChange={ this.props.searchChange }\n                />\n            </div>\n        );\n    }\n }\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass Scroll extends Component {\n    render() {\n        return (\n            <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n                { this.props.children }\n            </div>\n        );\n    }\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops. That is not good!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField } from '../action';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchField\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n    }\n}\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: []\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}));\n    }\n\n    render() {\n        const { robots } = this.state;\n        const { searchField, onSearchChange } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return !robots.length ?  <h1>Loading</h1>\n        :\n            (\n                    <div className='tc'>\n                        <h1>Robo Friends</h1>\n                        <SearchBox searchChange={ onSearchChange }/>\n                        <Scroll>\n                            <ErrorBoundary>\n                                <CardList robots={ filteredRobots }/>\n                            </ErrorBoundary>\n                        </Scroll>\n                    </div>\n            );\n        \n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state= initialState, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchRobots } from './reducers';\n\nconst store = createStore(searchRobots);\nReactDOM.render(\n                <Provider store = { store }>\n                    <App />\n                </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}